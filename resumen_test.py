import unittest

# Importamos el codigo a testear.
from resumen import Resumen
from estudiante import Estudiante
####################################################################

class TestResumen(unittest.TestCase):

    def test_init_asigna_atributos(self):
        # verificar si el inicializador guarda bien los atributos
        e1:Estudiante=Estudiante("LPA", 690.87878, 498.328390, -2.839213, "Rural", "Privado")
        e2:Estudiante=Estudiante("FOR", 345.4499,233.2390,1.87699, "Rural", "Estatal")
        e3:Estudiante=Estudiante("ETR", 239.16500009,481.86500 ,0.2666,"Urbano","Estatal")
        e4:Estudiante=Estudiante("RNE", 420.45982, 234.92381, 0.212321, "Urbano", "Privado")
        e5:Estudiante=Estudiante("SFE", 156.34562, 311.34222, 0.232498, "Urbano", "Privado")
        r:Resumen=Resumen([e1,e2,e3,e4,e5])
        self.assertEqual(r.cantidad, 5)
        self.assertAlmostEqual(r.promedio_matematica, 370.459824018)
        self.assertAlmostEqual(r.promedio_lengua, 351.939684)
        self.assertAlmostEqual(r.promedio_nse, -0.050160800000000026)
        self.assertAlmostEqual(r.proporcion_ambito_rural, 0.4)
        self.assertAlmostEqual(r.proporcion_sector_estatal, 0.4)
        
        e1:Estudiante=Estudiante("SCZ", 728.65777, 234.12882, -2.738290, "Rural", "Estatal")
        e2:Estudiante=Estudiante("MIS", 812.37826, 200.65910, 1.723339, "Rural", "Estatal")
        e3:Estudiante=Estudiante("LRI", 899.23909, 799.23888, -1.872839, "Rural", "Estatal")
        e4:Estudiante=Estudiante("TUC",700.120999,390.217212,1.320000, "Rural", "Estatal")
        e5:Estudiante=Estudiante("MZA",299.87392, 410.91910,2.89900, "Urbano", "Privado")
        r:Resumen=Resumen([e1,e2,e3,e4,e5])
        self.assertEqual(r.cantidad, 5)
        self.assertAlmostEqual(r.promedio_matematica, 688.0540078)
        self.assertAlmostEqual(r.promedio_lengua, 407.03262240000004)
        self.assertAlmostEqual(r.promedio_nse, 0.26624200000000003)
        self.assertAlmostEqual(r.proporcion_ambito_rural, 0.8)
        self.assertAlmostEqual(r.proporcion_sector_estatal, 0.8)
        
        e1:Estudiante=Estudiante("TUC", 720.74219, 261.37111,1.784990,"Urbano","Privado")
        e2:Estudiante=Estudiante("STA", 657.88187, 456.98799,-1.326346, "Rural", "Estatal")
        e3:Estudiante=Estudiante("SFE", 910.28391, 100.21821, -1.839213, "Urbano", "Privado")
        e4:Estudiante=Estudiante("CHA",567.31238, 90.32845, -2.384932, "Rural", "Estatal")
        e5:Estudiante=Estudiante("MIS", 235.83213, 450.24234, 0.192939, "Urbano", "Privado")
        r:Resumen=Resumen([e1,e2,e3,e4,e5])
        self.assertEqual(r.cantidad, 5)
        self.assertAlmostEqual(r.promedio_matematica, 618.4104960000001)
        self.assertAlmostEqual(r.promedio_lengua, 271.82962)
        self.assertAlmostEqual(r.promedio_nse, -0.7145124)
        self.assertAlmostEqual(r.proporcion_ambito_rural, 0.4)
        self.assertAlmostEqual(r.proporcion_sector_estatal, 0.4)

        e1:Estudiante=Estudiante("CBA", 876.38888, 567.175777, 1.909999, "Rural", "Privado")
        e2:Estudiante=Estudiante("ETR", 239.16500009,481.86500 ,0.2666,"Urbano","Estatal")
        e3:Estudiante=Estudiante("SDE", 345.9999999,567.99999, -0.9999, "Rural", "Estatal")
        e4:Estudiante=Estudiante("JJY", 888.2, 123.7, -1.0, "Urbano", "Estatal")
        e5:Estudiante=Estudiante("PBA", 340.0, 367.0, 1.2, "Rural", "Privado")
        r:Resumen=Resumen([e1,e2,e3,e4,e5])
        self.assertEqual(r.cantidad,5 )
        self.assertAlmostEqual(r.promedio_matematica,537.9507759979999 )
        self.assertAlmostEqual(r.promedio_lengua,421.54815340000005 )
        self.assertAlmostEqual(r.promedio_nse, 0.27533979999999997)
        self.assertAlmostEqual(r.proporcion_ambito_rural,0.6 )
        self.assertAlmostEqual(r.proporcion_sector_estatal, 0.6)

    def test_init_estudiantes_iguales(self):
        #todos los estudiantes tienen los mismos datos
        e1:Estudiante=Estudiante("SFE", 156.34562, 311.34222, 0.232498, "Urbano", "Privado")
        e2:Estudiante=Estudiante("SFE", 156.34562, 311.34222, 0.232498, "Urbano", "Privado")
        e3:Estudiante=Estudiante("SFE", 156.34562, 311.34222, 0.232498, "Urbano", "Privado")
        e4:Estudiante=Estudiante("SFE", 156.34562, 311.34222, 0.232498, "Urbano", "Privado")
        e5:Estudiante=Estudiante("SFE", 156.34562, 311.34222, 0.232498, "Urbano", "Privado")
        r:Resumen=Resumen([e1,e2,e3,e4,e5])
        self.assertEqual(r.cantidad,5 )
        self.assertAlmostEqual(r.promedio_matematica, 156.34562)
        self.assertAlmostEqual(r.promedio_lengua, 311.34222)
        self.assertAlmostEqual(r.promedio_nse,0.232498)
        self.assertAlmostEqual(r.proporcion_ambito_rural, 0.0)
        self.assertAlmostEqual(r.proporcion_sector_estatal, 0.0)
        
        e1:Estudiante=Estudiante("TUC", 210.98290, 340.32123, 0.281937, "Rural", "Privado")
        e2:Estudiante=Estudiante("TUC", 210.98290, 340.32123, 0.281937, "Rural", "Privado")
        e3:Estudiante=Estudiante("TUC", 210.98290, 340.32123, 0.281937, "Rural", "Privado")
        e4:Estudiante=Estudiante("TUC", 210.98290, 340.32123, 0.281937, "Rural", "Privado")
        e5:Estudiante=Estudiante("TUC", 210.98290, 340.32123, 0.281937, "Rural", "Privado")
        r:Resumen=Resumen([e1,e2,e3,e4,e5])
        self.assertEqual(r.cantidad,5 )
        self.assertAlmostEqual(r.promedio_matematica, 210.98290)
        self.assertAlmostEqual(r.promedio_lengua, 340.32123)
        self.assertAlmostEqual(r.promedio_nse,0.281937)
        self.assertAlmostEqual(r.proporcion_ambito_rural, 1.0)
        self.assertAlmostEqual(r.proporcion_sector_estatal, 0.0)
        
        e1:Estudiante=Estudiante("MZA",299.87292, 410.91899,2.90000,"Rural", "Privado")
        e2:Estudiante=Estudiante("MZA",299.87292, 410.91899,2.90000,"Rural", "Privado")
        e3:Estudiante=Estudiante("MZA",299.87292, 410.91899,2.90000,"Rural", "Privado")
        e4:Estudiante=Estudiante("MZA",299.87292, 410.91899,2.90000,"Rural", "Privado")
        e5:Estudiante=Estudiante("MZA",299.87292, 410.91899,2.90000,"Rural", "Privado")
        r:Resumen=Resumen([e1,e2,e3,e4,e5])
        self.assertEqual(r.cantidad,5 )
        self.assertAlmostEqual(r.promedio_matematica, 299.87292)
        self.assertAlmostEqual(r.promedio_lengua, 410.91899)
        self.assertAlmostEqual(r.promedio_nse,2.9)
        self.assertAlmostEqual(r.proporcion_ambito_rural,1.0 )
        self.assertAlmostEqual(r.proporcion_sector_estatal,0.0 )
        
        e1:Estudiante=Estudiante("CAT", 876.45982, 120.38493, 1.382373, "Urbano", "Estatal")
        e2:Estudiante=Estudiante("CAT", 876.45982, 120.38493, 1.382373, "Urbano", "Estatal")
        e3:Estudiante=Estudiante("CAT", 876.45982, 120.38493, 1.382373, "Urbano", "Estatal")
        e4:Estudiante=Estudiante("CAT", 876.45982, 120.38493, 1.382373, "Urbano", "Estatal")
        e5:Estudiante=Estudiante("CAT", 876.45982, 120.38493, 1.382373, "Urbano", "Estatal")
        r:Resumen=Resumen([e1,e2,e3,e4,e5])
        self.assertEqual(r.cantidad,5 )
        self.assertAlmostEqual(r.promedio_matematica,876.45982 )
        self.assertAlmostEqual(r.promedio_lengua,120.38493 )
        self.assertAlmostEqual(r.promedio_nse,1.382373)
        self.assertAlmostEqual(r.proporcion_ambito_rural,0.0 )
        self.assertAlmostEqual(r.proporcion_sector_estatal, 1.0)
        
    def test_init_proporciones_variados(self):
        #las proporciones van de 0.0, 0.25, 0.5, 0.75, 1.0
        
        #En este caso las proporciones son de 0.0
        e1:Estudiante=Estudiante("TDF", 289.82181, 230.56473, -1.783291, "Urbano", "Privado")
        e2:Estudiante=Estudiante("LRI", 899.23909, 799.23888, -1.872839, "Urbano", "Privado")
        e3:Estudiante=Estudiante("RNE", 420.45982, 234.92381, 0.212321, "Urbano", "Privado")
        e4:Estudiante=Estudiante("SLU",291.76150, 666.64499, -1.894999,"Urbano", "Privado")
        r:Resumen=Resumen([e1,e2,e3,e4])
        self.assertEqual(r.cantidad,4 )
        self.assertAlmostEqual(r.promedio_matematica,475.320555)
        self.assertAlmostEqual(r.promedio_lengua,482.8431025)
        self.assertAlmostEqual(r.promedio_nse,-1.334702)
        self.assertAlmostEqual(r.proporcion_ambito_rural,0.0 )
        self.assertAlmostEqual(r.proporcion_sector_estatal,0.0 )
        
        # En este caso las proporciones son de 0.25
        e1:Estudiante=Estudiante("CBA", 823.32837, 271.38293, 0.281382, "Rural", "Estatal")
        e2:Estudiante=Estudiante("ETR", 320.21221, 988.39201, -0.212893, "Urbano", "Privado")
        e3:Estudiante=Estudiante("SFE", 910.28391, 100.21821, -1.839213, "Urbano", "Privado")
        e4:Estudiante=Estudiante("JJY", 234.90098, 456.98923, 0.187312, "Urbano", "Privado")
        r:Resumen=Resumen([e1,e2,e3,e4])
        self.assertEqual(r.cantidad,4 )
        self.assertAlmostEqual(r.promedio_matematica,572.1813675)
        self.assertAlmostEqual(r.promedio_lengua,454.245595)
        self.assertAlmostEqual(r.promedio_nse,-0.395853)
        self.assertAlmostEqual(r.proporcion_ambito_rural, 0.25)
        self.assertAlmostEqual(r.proporcion_sector_estatal,0.25 )
        
        #En este caso las proporciones son de 0.5
        e1:Estudiante=Estudiante("NEU", 783.43824, 879.432473, 1.738273,"Rural" ,"Estatal")
        e2:Estudiante=Estudiante("JJY", 888.2, 123.7, -1.0, "Urbano", "Estatal")
        e3:Estudiante=Estudiante("JJY",859.8999, 184.8888,-1.347999, "Urbano", "Privado")
        e4:Estudiante=Estudiante("CBA", 876.38888, 567.175777, 1.909999, "Rural", "Privado")
        r:Resumen=Resumen([e1,e2,e3,e4])
        self.assertEqual(r.cantidad,4 )
        self.assertAlmostEqual(r.promedio_matematica,851.981755)
        self.assertAlmostEqual(r.promedio_lengua,438.79926250000005)
        self.assertAlmostEqual(r.promedio_nse,0.32506825)
        self.assertAlmostEqual(r.proporcion_ambito_rural, 0.5)
        self.assertAlmostEqual(r.proporcion_sector_estatal,0.5 )
        
        #En este caso las proporciones son de 0.75
        e1:Estudiante=Estudiante("ETR", 239.16500009,481.86500 ,0.2666,"Rural","Estatal")
        e2:Estudiante=Estudiante("FOR", 456.0009999,345.99, 0.39199, "Urbano", "Privado")
        e3:Estudiante=Estudiante("MZA", 190.83387, 777.74484, -2.873942, "Rural", "Estatal")
        e4:Estudiante=Estudiante("LPA", 510.77766, 921.87323, 1.642323, "Rural", "Estatal")
        r:Resumen=Resumen([e1,e2,e3,e4])
        self.assertEqual(r.cantidad,4 )
        self.assertAlmostEqual(r.promedio_matematica,349.1943824975)
        self.assertAlmostEqual(r.promedio_lengua,631.8682675)
        self.assertAlmostEqual(r.promedio_nse,-0.14325725000000006)
        self.assertAlmostEqual(r.proporcion_ambito_rural, 0.75)
        self.assertAlmostEqual(r.proporcion_sector_estatal,0.75 )
        
        #En este caso las proporciones son de 1.0
        e1:Estudiante=Estudiante("ETR", 239.16500009,481.86500 ,0.2666,"Rural","Estatal")
        e2:Estudiante=Estudiante("FOR", 534.29199, 911.32191, -1.319100,"Rural", "Estatal")
        e3:Estudiante=Estudiante("TUC",700.119999,390.218022,1.321000, "Rural", "Estatal")
        e4:Estudiante=Estudiante("STA", 657.87987, 456.98923, -1.325346, "Rural", "Estatal")
        r:Resumen=Resumen([e1,e2,e3,e4])
        self.assertEqual(r.cantidad,4 )
        self.assertAlmostEqual(r.promedio_matematica,532.8642147725)
        self.assertAlmostEqual(r.promedio_lengua,560.0985405)
        self.assertAlmostEqual(r.promedio_nse,-0.2642115)
        self.assertAlmostEqual(r.proporcion_ambito_rural, 1.0)
        self.assertAlmostEqual(r.proporcion_sector_estatal,1.0 )
        
    def test_init_puntajes_bajos_y_altos(self):
        #Los estudiantes tienen puntajes muy altos o muy bajos
        
        #Puntajes altos
        e1:Estudiante=Estudiante("ETR", 900.38213,999.86500 ,1.8323938,"Urbano","Estatal")
        e2:Estudiante=Estudiante("FOR", 879.29199, 799.32191, 2.837494,"Rural", "Privado")
        e3:Estudiante=Estudiante("FOR",888.38238,799.98329,1.321000, "Urbano", "Estatal")
        e4:Estudiante=Estudiante("JUN", 912.38293, 930.32182, 2.183293, "Rural", "Estatal")
        e5:Estudiante=Estudiante("MIS", 956.389213, 934.312938, 2.839893, "Urbano", "Privado")
        r:Resumen=Resumen([e1,e2,e3,e4,e5])
        self.assertEqual(r.cantidad,5 )
        self.assertAlmostEqual(r.promedio_matematica,907.3657286000001)
        self.assertAlmostEqual(r.promedio_lengua,892.7609916000001)
        self.assertAlmostEqual(r.promedio_nse,2.20281476)
        self.assertAlmostEqual(r.proporcion_ambito_rural, 0.4)
        self.assertAlmostEqual(r.proporcion_sector_estatal, 0.6)
        
        e1:Estudiante=Estudiante("SJI", 812.39218,892.839213 ,2.381723,"Rural","Estatal")
        e2:Estudiante=Estudiante("TUC", 910.83823, 890.12383, 2.993093,"Rural", "Privado")
        e3:Estudiante=Estudiante("CBA", 980.32933, 987.38238,1.891230, "Rural", "Privado")
        e4:Estudiante=Estudiante("MZA", 937.83239, 849.38123, 1.999991, "Rural", "Privado")
        e5:Estudiante=Estudiante("CAT", 988.83128, 990.83233, 1.893920, "Urbano", "Estatal")
        r:Resumen=Resumen([e1,e2,e3,e4,e5])
        self.assertEqual(r.cantidad,5 )
        self.assertAlmostEqual(r.promedio_matematica,926.0446820000001)
        self.assertAlmostEqual(r.promedio_lengua,922.1117965999999)
        self.assertAlmostEqual(r.promedio_nse,2.2319914)
        self.assertAlmostEqual(r.proporcion_ambito_rural, 0.8)
        self.assertAlmostEqual(r.proporcion_sector_estatal,0.4)
        
        
        #Puntajes bajos
        e1:Estudiante=Estudiante("CAB", 100.38123,87.82939 ,-2.384892,"Rural","Estatal")
        e2:Estudiante=Estudiante("PER", 30.43294, 40.323031, -1.329393,"Urbano", "Estatal")
        e3:Estudiante=Estudiante("FOR", 50.31239, 35.39213,-1.832383, "Urbano", "Estatal")
        e4:Estudiante=Estudiante("JUL", 23.43294, 30.32193, -2.394930, "Rural", "Privado")
        e5:Estudiante=Estudiante("BOL", 50.32132, 43.13293, -1.329393, "Urbano", "Privado")
        r:Resumen=Resumen([e1,e2,e3,e4,e5])
        self.assertEqual(r.cantidad,5 )
        self.assertAlmostEqual(r.promedio_matematica,50.976164)
        self.assertAlmostEqual(r.promedio_lengua,47.3998822)
        self.assertAlmostEqual(r.promedio_nse,-1.8541982000000001)
        self.assertAlmostEqual(r.proporcion_ambito_rural, 0.4)
        self.assertAlmostEqual(r.proporcion_sector_estatal,0.6)
        
        e1:Estudiante=Estudiante("PBA", 40.31238, 48.48234 ,-2.874388,"Urbano","Privado")
        e2:Estudiante=Estudiante("CHU", 48.82383, 32.47384, -2.483494,"Rural", "Estatal")
        e3:Estudiante=Estudiante("NEU", 72.43244, 20.48348,-1.463274, "Urbano", "Privado")
        e4:Estudiante=Estudiante("LPA", 41.32833, 78.42734, -1.748342, "Urbano", "Estatal")
        e5:Estudiante=Estudiante("SCZ", 30.42344, 50.23488, -2.324377, "Rural", "Estatal")
        r:Resumen=Resumen([e1,e2,e3,e4,e5])
        self.assertEqual(r.cantidad,5 )
        self.assertAlmostEqual(r.promedio_matematica,46.664083999999995)
        self.assertAlmostEqual(r.promedio_lengua,46.020376000000006)
        self.assertAlmostEqual(r.promedio_nse,-2.178775)
        self.assertAlmostEqual(r.proporcion_ambito_rural, 0.4)
        self.assertAlmostEqual(r.proporcion_sector_estatal,0.6)
        
    def test_init_puntajes_con_muchos_decimales(self):
        # Todos los puntajes de los estudiantes tienen muchos decimales
        e1:Estudiante=Estudiante("SJU", 427.47328478274823748237483478324, 389.3123781738127381273812738123  ,-2.748327483274823748234743,"Urbano","Privado")
        e2:Estudiante=Estudiante("STA", 812.32874873284732847832472834782, 569.4238472384783274823748237482, -1.2183921839182391823912839,"Urbano", "Privado")
        e3:Estudiante=Estudiante("CAB", 233.74823748200938492384923849384, 138.3837127381238721831991823823,-0.837218371823781273812738, "Urbano", "Estatal")
        e4:Estudiante=Estudiante("MIS", 789.32898329483209480932840239493, 178.7821738173817238172381728317, -0.32183912839128391283912, "Urbano", "Privado")
        e5:Estudiante=Estudiante("FOR", 831.39218392183928392813912839120, 940.3821329183923892839329399999, -1.239128392183912839128391, "Rural", "Privado")
        r:Resumen=Resumen([e1,e2,e3,e4,e5])
        self.assertEqual(r.cantidad,5 )
        self.assertAlmostEqual(r.promedio_matematica, 618.8542876428553)
        self.assertAlmostEqual(r.promedio_lengua, 443.25684897723784)
        self.assertAlmostEqual(r.promedio_nse,-1.2729811119184082)
        self.assertAlmostEqual(r.proporcion_ambito_rural,0.2 )
        self.assertAlmostEqual(r.proporcion_sector_estatal, 0.2)
        
        e1:Estudiante=Estudiante("MZA", 678.3812321839821831298382842834, 823.43284092384923849238493249 ,1.48329849384482394293482934892348,"Urbano","Privado")
        e2:Estudiante=Estudiante("ETR", 3.141592653589793238462643383279, 1.4142135623730950488016887242 ,2.71828182845904523536028747135266,"Rural", "Estatal")
        e3:Estudiante=Estudiante("CBA", 921.3723872837823791838910493284, 832.38129389489098398139823998,0.898748274872487238472847283748237, "Urbano", "Estatal")
        e4:Estudiante=Estudiante("CHU", 128.48293849238492384928942834994, 430.4239492349239439939399393, -2.32189381293810192839120938129384, "Rural", "Privado")
        e5:Estudiante=Estudiante("TDF", 499.38213812398492389328493948392, 888.3178748718231831273817381, -1.37182738127381723817238918478243, "Urbano", "Estatal")
        r:Resumen=Resumen([e1,e2,e3,e4,e5])
        self.assertEqual(r.cantidad,5 )
        self.assertAlmostEqual(r.promedio_matematica,446.15205774754475)
        self.assertAlmostEqual(r.promedio_lengua,595.1940344975721)
        self.assertAlmostEqual(r.promedio_nse,0.2813214805928873)
        self.assertAlmostEqual(r.proporcion_ambito_rural,0.4 )
        self.assertAlmostEqual(r.proporcion_sector_estatal, 0.6)
        
        e1:Estudiante=Estudiante("JJY", 891.39182389128391839182391829381, 847.391829381293891283918329123 ,-0.8316237237126371623817237123,"Rural","Estatal")
        e2:Estudiante=Estudiante("SCZ", 490.87238172381273817238719312831, 721.391283748787382183283981293, 1.23847238479832740239489234809,"Rural", "Privado")
        e3:Estudiante=Estudiante("CAT", 111.12738172381273874984848787381, 70.87381273817283172837128378123,-1.738217381728317283712387123, "Urbano", "Privado")
        e4:Estudiante=Estudiante("CHA", 90.738217381273817283712837192838, 748.12837218372183728371823798123, -2.3172873812738127391238438, "Urbano", "Privado")
        e5:Estudiante=Estudiante("ETR", 711.213783784783182312312839128312, 911.19389128391823918239182391239, 1.379821738912738917238917238, "Rural", "Estatal")
        r:Resumen=Resumen([e1,e2,e3,e4,e5])
        self.assertEqual(r.cantidad,5 )
        self.assertAlmostEqual(r.promedio_matematica,459.0687177009933)
        self.assertAlmostEqual(r.promedio_lengua,659.7958378671789)
        self.assertAlmostEqual(r.promedio_nse,-0.45376687260074017)
        self.assertAlmostEqual(r.proporcion_ambito_rural, 0.6)
        self.assertAlmostEqual(r.proporcion_sector_estatal, 0.4)
        
        e1:Estudiante=Estudiante("FOR", 512.7361872381238123812321331283731, 912.7238127381723817239817238738123 ,-2.371283712987312987398127398213,"Rural","Privado")
        e2:Estudiante=Estudiante("TUC", 409.38423984932840923840932849328432, 802.482394823948209348932849238402, -1.47832748237482374892374823748234,"Rural", "Estatal")
        e3:Estudiante=Estudiante("SDE", 843.0428394832948293482934892384923, 763.2479823748923748932748237489237,-2.4237489273498279423940995080948392, "Rural", "Estatal")
        e4:Estudiante=Estudiante("LPA", 659.948239084092840928349203843482094, 23.438294832948293849238492384234, 1.4238428394789237457755775575757757, "Rural", "Privado")
        e5:Estudiante=Estudiante("PBA", 938.8748237874892374983274892748234324, 710.3092183091283091283910283921, -2.128373847843982438294823748324822, "Rural", "Privado")
        r:Resumen=Resumen([e1,e2,e3,e4,e5])
        self.assertEqual(r.cantidad,5 )
        self.assertAlmostEqual(r.promedio_matematica,672.7972658884657)
        self.assertAlmostEqual(r.promedio_lengua,642.4403406158178)
        self.assertAlmostEqual(r.promedio_nse,-1.3955782262154046)
        self.assertAlmostEqual(r.proporcion_ambito_rural, 1.0)
        self.assertAlmostEqual(r.proporcion_sector_estatal, 0.4)
        
        e1:Estudiante=Estudiante("LRI", 921.2138918391283912839128391283918239, 812.83283928398293081923819238382 ,-1.327387982748237483274823748234432,"Urbano","Privado")
        e2:Estudiante=Estudiante("LPA", 209.1378127381723981273987456565665656, 387.31728371238948473829482734928, 1.2378127382739183712937837950984903,"Urbano", "Estatal")
        e3:Estudiante=Estudiante("ETR", 349.1283198237981273982738478738423644, 666.84234899327483274832748327498, -2.324973284732874983274982374982374, "Urbano", "Estatal")
        e4:Estudiante=Estudiante("TDF", 222.65884938492384938249238402394829443, 732.328391823918209382193819238912, -1.31728378273982137827382738237382, "Urbano", "Privado")
        e5:Estudiante=Estudiante("CRR", 999.13273817298372891378217398127381233, 821.3182783721983718237821738237832, 0.03718273812738127381273823, "Urbano", "Estatal")
        r:Resumen=Resumen([e1,e2,e3,e4,e5])
        self.assertEqual(r.cantidad,5 )
        self.assertAlmostEqual(r.promedio_matematica,540.2543223918012)
        self.assertAlmostEqual(r.promedio_lengua,684.1278284371526)
        self.assertAlmostEqual(r.promedio_nse,-0.7389299147639268)
        self.assertAlmostEqual(r.proporcion_ambito_rural, 0.0)
        self.assertAlmostEqual(r.proporcion_sector_estatal, 0.6)
        
    def test_init_casos_variados(self):
        #Puntajes 0.0
        e1:Estudiante=Estudiante("LRI", 0.0, 0.0 ,0.0,"Rural","Estatal")
        e2:Estudiante=Estudiante("LPA", 0.0, 0.0, 0.0,"Urbano", "Estatal")
        e3:Estudiante=Estudiante("ETR", 0.0, 0.0,0.0, "Urbano", "Estatal")
        e4:Estudiante=Estudiante("TDF", 0.0, 0.0, 0.0, "Rural", "Privado")
        e5:Estudiante=Estudiante("CRR", 0.0, 0.0, 0.0, "Rural", "Privado")
        r:Resumen=Resumen([e1,e2,e3,e4,e5])
        self.assertEqual(r.cantidad,5 )
        self.assertAlmostEqual(r.promedio_matematica,0.0)
        self.assertAlmostEqual(r.promedio_lengua,0.0)
        self.assertAlmostEqual(r.promedio_nse,0.0)
        self.assertAlmostEqual(r.proporcion_ambito_rural, 0.6)
        self.assertAlmostEqual(r.proporcion_sector_estatal, 0.6)
        
        #Lista vacia
        r:Resumen=Resumen([])
        self.assertEqual(r.cantidad, 0)
        self.assertAlmostEqual(r.promedio_matematica,0.0)
        self.assertAlmostEqual(r.promedio_lengua,0.0)
        self.assertAlmostEqual(r.promedio_nse,0.0)
        self.assertAlmostEqual(r.proporcion_ambito_rural, 0.0)
        self.assertAlmostEqual(r.proporcion_sector_estatal, 0.0)
        
        #Un solo estudiante
        e1:Estudiante=Estudiante("CAT", 450.32103, 392.48343 ,-1.321398,"Rural","Estatal")
        r:Resumen=Resumen([e1])
        self.assertEqual(r.cantidad, 1)
        self.assertAlmostEqual(r.promedio_matematica,450.32103)
        self.assertAlmostEqual(r.promedio_lengua,392.48343)
        self.assertAlmostEqual(r.promedio_nse,-1.321398)
        self.assertAlmostEqual(r.proporcion_ambito_rural, 1.0)
        self.assertAlmostEqual(r.proporcion_sector_estatal, 1.0)
        
        #Los puntajes son int convertidos a float
        e1:Estudiante=Estudiante("RNE", float(823), float(321) ,float(1),"Urbano","Privado")
        e2:Estudiante=Estudiante("SDE", float(231), float(764), float(-1),"Urbano", "Estatal")
        e3:Estudiante=Estudiante("SFE", float(890), float(912), float(-2), "Rural", "Privado")
        e4:Estudiante=Estudiante("CHA", float(432), float(120), float(-2), "Urbano", "Privado")
        e5:Estudiante=Estudiante("CHU", float(721), float(489), float(-0), "Urbano", "Estatal")
        r:Resumen=Resumen([e1,e2,e3,e4,e5])
        self.assertEqual(r.cantidad,5 )
        self.assertAlmostEqual(r.promedio_matematica,619.4)
        self.assertAlmostEqual(r.promedio_lengua,521.2)
        self.assertAlmostEqual(r.promedio_nse,-0.8)
        self.assertAlmostEqual(r.proporcion_ambito_rural, 0.2)
        self.assertAlmostEqual(r.proporcion_sector_estatal, 0.4)
####################################################################

unittest.main()
